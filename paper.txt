Distributed Programming with Web workers
An implementation of web workers for distributed research.

OUTLINE:
0. Introduction

1. Distributed Research
  1.1 Idea and goal of DR

2. Web Workers
  2.1 How Web Worker work 
  2.2 Advantages
  2.3 Limitations of Web Workers

3. Application (Single Browser - simple)
  -> Pathfinding (Canvas)

4. Application (Distributed Research)
  4.1 Goal of the application
  4.2 The calculation
  4.3 Environment & Frameworks
  4.4 Architecture
  4 3.4.1 Server
  4 3.4.1 Client
  4.5 Implementation
  4 3.4.2 File-Structure
  4 3.4.3 Data-Models
  4 3.4.4 The Code
  4.6 Testing & Results

5. Result
------------------------------------------
0. Intro
Einführung zum Thema. Etc.

----------
1. Distributed research
Den Sinn und die Möglichkeiten von Distributed Research erläutern.
Auch ein bisschen wie es technisch implementiert wird.

----------
2. Web workers
Wie Web Workers funktionieren. Eigenschaften von Web workers.

----------
3. Implement an application with web workers in a single browser
Eine Applikation erstellen, die mit Web workers läuft.
Diese soll aber noch nicht über einen Server Informationen beziehen.
Idee: Pathfinding mit Web workers.
D.h. mit Hilfe von Web workers und dem Dijkstra-Algorithmus wird ein Pfad gefunden.

----------
4a. Implement an application with web workers and nodeJs (server - clients)
Idee: Mehrere Rechner (Clients) rechnen an einem Problem.
Dabei verteilt ein Server die Rechenaufgaben und sammelt die Ergebnisse.

Zum Beispiel:
Es gibt 2 Clients.
Der Server teilt die Aufgabe und schickt diese an die Clients.
Die Clients starten einen web worker. Der web worker rechnet die Aufgabe (also im Hintergrund).
Sobald dieser fertig ist schickt der Client das Ergenis zurück an den Server.

Facedetection: Redis hat URL mit Bildern. Clients bekommen path von Bildern. Clients berechnen face detection.

Entwicklungs-Umgebung:
Als 'Plattform' würde ich Rails 3 benutzen (damit man das ganze später noch als richtige web applikation ausbauen könnte).
Client: Nur Javascript mit JQuery und Socket.io.
Server: NodeJS, verarbeitet die Clients.
Redis als Datenbank.


4b. Implement an application with web workers and nodeJs (client - client)
Idee: Ein (inaktiver) Client rechnet etwas für einen anderen Client.

Clients die nicht sehr viele Ressourcen haben (Smartphones) um clientseitig
etwas zu berechnen (zumindest nicht so schnell).
D.h. ein Client[1] schiebt die Arbeit zu einem anderen Client[2] (Zum Beispiel ein User, der 
auf der Webseite länger inaktiv war). Client[2] startet einen Web worker 
und berechnet für Client[1] das Ergebnis.

Man könnte zum Beispiel die Koordinaten von Gesichtern in Bilder (also facedetection)
berechnen lassen.

Entwicklungs-Umgebung wäre die Gleiche wie bei 4a.

----------
5. Result





-------------------------
# INTRODUCTION #
-------------------------



-------------------------
# DISTRIBUTED RESEARCH #
-------------------------
What, why. Examples (seti@home ...)

How distributed programming works ...

Relation to this thesis



-------------------------
# Web Workers #
-------------------------
# How Web Workers Work
With web workers it is possible to run scripts in the background, just like with threads in C++ or other
programming languages, which support multithreading.

There are two types of web workers: Dedicated worker and Shared worker.
Dedicated web workers are linked to the script which created the worker.
Shared web workers instead, are able to communicate with other scripts from the same domain.


... allows for a multi-threaded execution of JavaScript programs.
There are two types of web workers: Dedicated worker and Shared worker ...

QOUTED:
  A 'worker' is a script that will be loaded and executed in the background. 

  "A web worker is a single JavaScript file loaded and executed in the background on a separate thread. Dedicated web workers are linked to their creator (the script which loaded the worker). Shared web workers allow any number of scripts to communicate with a single worker.

  Shared web workers adhere to the same rules as their dedicated counterparts: no DOM, document or page script access, and limited read-only permission to most window properties. In addition, page scripts may only communicate with shared web workers from the same origin/domain (somesite.com)."

  Dedicated workers: these are linked to their creator (the script which loaded the worker).
  Shared workers: the allow any script from the same domain (somesite.com) to communicate with the worker.

Quoted: 
  Web Worker specification[1] is a separate specification from HTML5 specification[2][3] but can be used with HTML5
Qouted:
  Web workers are isolated from the main web page

Workers can spawn more workers
Timeouts and intervals
Error handling
Can be terminated
Access on navigator object
import scripts and libraries


# Advantages
- Web workers improve the user interaction while running a heavy script.
Due to the fact, that web workers don't run in the same process, as the website does, but run in an isolated
area, web workers can help to maintain a smooth interaction. Thus the advantage of running a script in another 
thread is that the user does not has to wait until the script has finished, but can interact normally with the page.
This is also particularly important to maintain visitors of a website.

- A lot of browsers nowadays support web workers. A sensful and successfull implementation of HTML5 features only makes sense
if enough browsers support them. Web workers are currently supported by Safari, Chrome, Opera and Mozilla Firefox.
Furthermore even mobile devices like Safari for iOS 5 and Android (greater 2.0), support web workers. Only the Internet Explorer
doesn't support web workers yet. However, according to w3schools stats, 77% of the users don't use the 
Internet Explorer. In addition IE in version 10 may support it.
Q:http://www.w3schools.com/browsers/browsers_stats.asp


- Hiding scripts in background
- User Interaction -> no blocking / interruption
- Can use XMLHttpRequest
- Supported currently by Safari, Chrome, Opera and Mozilla Firefox.
  Web workers are supported in Safari for iOS 5, and in Android (operating system) 2.0[8] and later.
  (Even mobile)
- Creating workers from a url


# Restrictions
Due to security measures:
- No access to DOM
- Thread safety -> spawns real OS-Level threads -> actually very secure -> but ... (https://developer.mozilla.org/en/Using_web_workers)

User doesn know -> Browser Limitations???

# Communication / How it works
Message passing. String or JSON (or any data type that can be serialized)
[EXAMPLE]


http://www.html5rocks.com/en/tutorials/workers/basics/
http://dev.opera.com/articles/view/web-workers-rise-up/